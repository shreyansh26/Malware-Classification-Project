def header_byte_1gram():
    colnames = []
    for i in range(16**2):
        temp = hex(i)[2:]
        if len(str(temp))==1:
            temp = "0"+str(temp)
        colnames += ['byte_1G_'+ temp]
    return colnames


def header_byte_2grams():
    colnames = []
    colnames += ['byte_2G_'+hex(i)[2:] for i in range(16**4)]
    return colnames


def header_byte_meta_data():
    colnames = ['byte_filesize','byte_offset']
    return colnames


def header_byte_img1():
    colnames = []
    for i in range(52):
        colnames += ['byte_Img1_'+str(i)]
    return colnames


def header_byte_img2():
    colnames = []
    for i in range(108):
        colnames += ['byte_Img2_'+str(i)]
    return colnames


def header_byte_str_len():
    colnames = ['string_len_counts_' + str(x) for x in range(1,100)] + [
        'string_len_counts_0_10',
        'string_len_counts_10_30',
        'string_len_counts_30_60',
        'string_len_counts_60_90',
        'string_len_counts_0_100',
        'string_len_counts_100_150',
        'string_len_counts_150_250',
        'string_len_counts_250_400',
        'string_len_counts_400_600',
        'string_len_counts_600_900',
        'string_len_counts_900_1300',
        'string_len_counts_1300_2000',
        'string_len_counts_2000_3000',
        'string_len_counts_3000_6000',
        'string_len_counts_6000_15000',
        'string_total_len',
        'string_ratio'
    ]
    return colnames


def header_byte_entropy():
    colnames = []
    st = ['mean','var','median','max','min','max-min']

    colnames.extend( ['ent_q_diffs_' + str(x) for x in range(21) ])
    colnames.extend( ['ent_q_diffs_' + x for x in st])

    colnames.extend( ['ent_q_diff_diffs_' + str(x) for x in range(21) ])
    colnames.extend( ['ent_q_diff_diffs_' + x for x in st])

    for i in range(4):
        colnames.extend( ['ent_q_diff_block_' + str(i) + '_' + str(x) for x in range(21) ])
        colnames.extend( ['ent_q_diff_diffs_'+ str(i) + '_' + x for x in st])

    colnames.extend( ['ent_p_' + str(x) for x in range(20) ])
    colnames.extend( ['ent_p_diffs_' + str(x) for x in range(20) ])

    return colnames