from multiprocessing import Pool, Process
from settings import *
import os

from byte_code_feature_extraction import byte_extraction
from asm_code_feature_extraction import asm_extraction
from classification_system import classification


def byte_code_worker(datasets):
    byte_pool = Pool(2)
    byte_pool.map(byte_extraction, datasets)

def asm_code_worker(datasets):
    byte_pool = Pool(2)
    byte_pool.map(asm_extraction, datasets)

def main():
    steps = ['feature extraction', 'classification']
    step = steps[0]

    datasets = ['train', 'test']

    if step == 'feature extraction':
        print('Feature Extraction Step')
        print('=======================')

        p1 = Process(target=byte_code_worker, args=(datasets,))
        p2 = Process(target=asm_code_worker, args=(datasets,))
        p1.start()
        p2.start()
        p1.join()
        p2.join()
        print('Done!')

    if step == 'classification':
        print('Classification Step')
        print('===================')

        eval_methods = ['cv', 'test']
        method = 1

        if eval_methods[method] == 'cv':
            print('Testing with Cross validation')
            classification(TRAIN_FILE, select = False, bagging = False, test = 'cv')
        else:
            print('Testing on the test dataset')
            classification(TRAIN_FILE, bagging = True, test = TEST_FILE)

if __name__ == "__main__":
    main()