import os
import gzip
import re
from math import log
import numpy as np
import mahotas
import mahotas.features
from mahotas.features.lbp import lbp
from PIL import Image

def byte_1gram(byte_code):
    one_byte = [0]*16**2
    for row in byte_code:
        codes = row.strip().split()[1:]
        # Convert code to 1 byte
        one_byte_code = []
        for i in codes:
            if i != '??':
                one_byte_code += [int(i,16)]

        # Calculate the frequency of 1byte
        for i in one_byte_code:
                    one_byte[i] += 1
    return one_byte

def byte_meta_data(file_path, file):

    # Filesize
    meta_data = []
    statinfo = os.stat(file_path)
    fileSize = statinfo.st_size
    meta_data.append(fileSize)

    # Start Address
    firstLine = file.readline().split()
    offset = firstLine[0]
    dec = int(offset, 16)
    meta_data.append(dec)

    return meta_data

def byte_image1(byte_code):
    img_feat = []
    # Get image array
    img = byte_make_image(byte_code)
    # Extract Haralick features
    features = mahotas.features.haralick(img)
    for i in range(len(features)):
        for j in range(len(features[0])):
            img_feat.append(features[i][j])
    return img_feat

def byte_image2(byte_code):
    img_feat = []
    # Get image array
    img = byte_make_image(byte_code)
    spoints = lbp(img,10,10,ignore_zeros=False)
    img_feat = spoints.tolist()
    return img_feat

def byte_make_image(byte_code):
    img_array=[]
    for row in byte_code:
        rowx = row.split()
        if len(rowx) != 17:
            continue
        img_array.append([int(i,16) if i != '??' else 0 for i in rowx[1:]])
    img_array = np.array(img_array)
    if img_array.shape[1] != 16:
        assert(False)
    b = int((img_array.shape[0]*16)**(0.5))
    b = 2**(int(log(b)/log(2))+1)
    a = int(img_array.shape[0]*16/b)
    img_array = img_array[:a*b//16,:]
    img_array = np.reshape(img_array,(a,b))
    # img_array2 = np.uint8(img_array)
    # im = Image.fromarray(img_array2)
    # im.show()
    return img_array

def byte_entropy(file_name):
    ents = entropy.get_feats([entropy.get_entropy_features(file_name)])
    #ent = entropy.get_entropy_features(file_name)
    #print len(ents[0])
    return ents[0]


def byte_string_lengths(file_name):
    strs_len = strings.extract_length([strings.get_strings(file_name)])
    #print strs_len
    return strs_len[0].tolist()
